@page "/photos"
@attribute [Authorize(Roles = "администратор")]
@inject IViewBag ViewBag
@inject IPhotosService PhotosService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<div class="row row-cols-1 row-cols-md-2 row-cols-xl-2">
    @foreach (var album in albums.OrderByDescending(d => d.updated).Reverse())
    {
        <Album album="album">
            <Navigation>
                <button class="btn btn-light mr-1" @onclick="()=>показать(album)"><i class="far fa-eye"></i></button>
                <button class="btn btn-light mr-1" @onclick="()=>изменить(album)"><i class="fas fa-pencil-alt"></i></button>
                <button class="btn btn-light" @onclick="()=>запрос_на_удаление(album)"><i class="fas text-danger fa-trash-alt"></i></button>
            </Navigation>
        </Album>
    }
</div>


<Modal_album album="selectedAlbum" скрыть_окно="()=>скрыть()"></Modal_album>
<Modal_remove_album album="selectedAlbum" удалить_фотоальбом="()=>удалить(selectedAlbum)"></Modal_remove_album>


@code {
    public List<imagesAlbum> albums = new List<imagesAlbum>();
    imagesAlbum selectedAlbum = new imagesAlbum();

    protected override async Task OnInitializedAsync()
    {
        ViewBag.заголовок_страницы = "Фотографии";
        albums = await PhotosService.imagesAlbums();
    }

    async Task показать(imagesAlbum album)
    {
        selectedAlbum = new imagesAlbum();
        await JSRuntime.InvokeAsync<string>("Hidden_album", "modal_album");
        selectedAlbum = album;
        await JSRuntime.InvokeAsync<string>("Show_album", "modal_album");
    }

    async Task скрыть()
    {
        selectedAlbum = new imagesAlbum();
        await JSRuntime.InvokeAsync<string>("Hidden_album", "modal_album");
    }

    void изменить(imagesAlbum album)
    {
        NavigationManager.NavigateTo($"/photos/edit/{album.ID}");
    }

    async Task запрос_на_удаление(imagesAlbum album)
    {
        selectedAlbum = album;
        await JSRuntime.InvokeAsync<string>("Show_Ask_remove_album", "modal_remove_album");
    }

    async Task удалить(imagesAlbum album)
    {
        await PhotosService.delete(album.ID);
        albums.Remove(album);
        await JSRuntime.InvokeAsync<string>("Hide_Ask_remove_album", "modal_remove_album");
    }
}
