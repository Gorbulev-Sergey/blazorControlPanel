@page "/schedule/create"
@inject IViewBag ViewBag
@inject ISchedulesService SchedulesService

<div class="form-group mb-3">
    <input type="month" class="form-control border-0" placeholder="месяц" @bind="месяц_и_год_расписания" />
    <button @onclick="()=>сохранить_данные()">Сохранить</button>
</div>

<Schedule schedule="schedule"></Schedule>


@code {
    DateTime _месяц_и_год_расписания;
    DateTime месяц_и_год_расписания
    {
        get
        {
            return _месяц_и_год_расписания;
        }
        set
        {
            _месяц_и_год_расписания = value;
            schedule.Clear();
            получение_данных();
        }
    }

    List<schedule_string> schedule = new List<schedule_string>();

    protected override async Task OnInitializedAsync()
    {
        ViewBag.заголовок_страницы = "Создать расписание";

        месяц_и_год_расписания = DateTime.Now;
    }

    void получение_данных()
    {
        // Получаем данные из бд
        var schedule_db = SchedulesService.schedule(месяц_и_год_расписания);

        // Заполняем месяц данными
        for (int i = 1; i <= DateTime.DaysInMonth(_месяц_и_год_расписания.Year, _месяц_и_год_расписания.Month); i++)
        {
            if (schedule_db.FirstOrDefault(s => s.date_and_time.Day == i) != null)
            {
                // Если есть данные из бд на этот день, то подставляем их
                schedule.Add(schedule_db.FirstOrDefault(s => s.date_and_time.Day == i));
            }
            else
            {
                // иначе, вставляем пустую строку
                schedule.Add(new schedule_string { date_and_time = new DateTime(месяц_и_год_расписания.Year, месяц_и_год_расписания.Month, i) });
            }
        }
    }

    async Task сохранить_данные()
    {        
        await SchedulesService.update_or_create(schedule);
    }
}
